/*
 *  @(#) $Id: sample1.cfg 766 2015-09-02 07:42:59Z ertl-honda $
 */

/*
 *  サンプルプログラム(1)のシステムコンフィギュレーションファイル
 */

#include "sample1.h"
#include "syssvc/safeg_load.h"

INCLUDE("target_timer.cfg");
INCLUDE("syssvc/syslog.cfg");
INCLUDE("syssvc/banner.cfg");
INCLUDE("syssvc/serial.cfg");
INCLUDE("syssvc/logtask.cfg");
INCLUDE("target_ipi.cfg");
    
ATT_INI({ TA_NULL, 0, global_inirtn });
ATT_TER({ TA_NULL, 0, global_terrtn });

CLASS(TCL_1){
	CRE_TSK(TASK1_1, { TA_NULL, 0x10000|1, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK1_2, { TA_NULL, 0x10000|2, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK1_3, { TA_NULL, 0x10000|3, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(MAIN_TASK1, { TA_ACT, 1, main_task, MAIN_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(SERVER_TASK1, { TA_ACT, 1, server_task, SERVER_PRIORITY, STACK_SIZE, NULL });
	DEF_TEX(TASK1_1, { TA_NULL, tex_routine });
	DEF_TEX(TASK1_2, { TA_NULL, tex_routine });
	DEF_TEX(TASK1_3, { TA_NULL, tex_routine });
#ifdef TOPPERS_SYSTIM_LOCAL
	CRE_CYC(CYCHDR1, { TA_NULL, 1, cyclic_handler, CYC_TIME, 0 });
	CRE_ALM(ALMHDR1, { TA_NULL, 1, alarm_handler });
#endif /* TOPPERS_SYSTIM_LOCAL */
#ifdef CPUEXC1
	DEF_EXC(CPUEXC1, { TA_NULL, cpuexc_handler });
#endif /* CPUEXC1 */
	CRE_DTQ(SERVER_DTQ1, { TA_TPRI, NUM_SERVER_DTQ, NULL });
	ATT_INI({ TA_NULL, 1, local_inirtn });
	ATT_TER({ TA_NULL, 1, local_terrtn });
#ifdef TOPPERS_SAFEG_SECURE
	ATT_INI({ TA_NULL, 1, safeg_load_init });
	CRE_TSK(BTASK1, { TA_ACT, 1, btask, 15, STACK_SIZE, NULL });
	CRE_TSK(RTASK1, { TA_NULL, 1, rtask, 14, STACK_SIZE, NULL });
	CRE_CYC(CYCHDR_S1, { TA_NULL, 1, cyclic_handler_s, 1000, 0 });
#endif /* TOPPERS_SAFEG_SECURE */
}

#ifdef TOPPERS_SYSTIM_GLOBAL
CLASS(TCL_SYSTIM_PRC){
	CRE_CYC(CYCHDR1, { TA_NULL, 1, cyclic_handler, CYC_TIME, 0 });
	CRE_ALM(ALMHDR1, { TA_NULL, 1, alarm_handler });
}
#endif /* TOPPERS_SYSTIM_GLOBAL */

#if TNUM_PRCID >= 2
CLASS(TCL_2){
	CRE_TSK(TASK2_1, { TA_NULL, 0x20000|1, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK2_2, { TA_NULL, 0x20000|2, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK2_3, { TA_NULL, 0x20000|3, task, MID_PRIORITY, STACK_SIZE, NULL });
#ifndef G_SYSLOG
	CRE_TSK(MAIN_TASK2, { TA_ACT, 2, main_task, MAIN_PRIORITY, STACK_SIZE, NULL });
#endif /* G_SYSLOG */
	CRE_TSK(SERVER_TASK2, { TA_ACT, 2, server_task, SERVER_PRIORITY, STACK_SIZE, NULL });
	DEF_TEX(TASK2_1, { TA_NULL, tex_routine });
	DEF_TEX(TASK2_2, { TA_NULL, tex_routine });
	DEF_TEX(TASK2_3, { TA_NULL, tex_routine });
#ifdef TOPPERS_SYSTIM_LOCAL
	CRE_CYC(CYCHDR2, { TA_NULL, 2, cyclic_handler, CYC_TIME, 0 });
	CRE_ALM(ALMHDR2, { TA_NULL, 2, alarm_handler });
#endif /* TOPPERS_SYSTIM_LOCAL */
#ifdef CPUEXC2
	DEF_EXC(CPUEXC2, { TA_NULL, cpuexc_handler });
#endif /* CPUEXC2 */
	CRE_DTQ(SERVER_DTQ2, { TA_TPRI, NUM_SERVER_DTQ, NULL });
	ATT_INI({ TA_NULL, 2, local_inirtn });
	ATT_TER({ TA_NULL, 2, local_terrtn });
#ifdef TOPPERS_SAFEG_SECURE
	ATT_INI({ TA_NULL, 1, safeg_load_init });
	CRE_TSK(BTASK2, { TA_ACT, 2, btask, 15, STACK_SIZE, NULL });
	CRE_TSK(RTASK2, { TA_NULL, 2, rtask, 14, STACK_SIZE, NULL });
	CRE_CYC(CYCHDR_S2, { TA_NULL, 2, cyclic_handler_s, 1000, 0 });
#endif /* TOPPERS_SAFEG_SECURE */
}

#ifdef TOPPERS_SYSTIM_GLOBAL
CLASS(TCL_SYSTIM_PRC){
	CRE_CYC(CYCHDR2, { TA_NULL, 2, cyclic_handler, CYC_TIME, 0 });
	CRE_ALM(ALMHDR2, { TA_NULL, 2, alarm_handler });
}
#endif /* TOPPERS_SYSTIM_GLOBAL */
#endif /* TNUM_PRCID >= 2 */

#if TNUM_PRCID >= 3
CLASS(TCL_3){
	CRE_TSK(TASK3_1, { TA_NULL, 0x30000|1, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK3_2, { TA_NULL, 0x30000|2, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK3_3, { TA_NULL, 0x30000|3, task, MID_PRIORITY, STACK_SIZE, NULL });
#ifndef G_SYSLOG
	CRE_TSK(MAIN_TASK3, { TA_ACT, 3, main_task, MAIN_PRIORITY, STACK_SIZE, NULL });
#endif /* G_SYSLOG */
	CRE_TSK(SERVER_TASK3, { TA_ACT, 3, server_task, SERVER_PRIORITY, STACK_SIZE, NULL });
	DEF_TEX(TASK3_1, { TA_NULL, tex_routine });
	DEF_TEX(TASK3_2, { TA_NULL, tex_routine });
	DEF_TEX(TASK3_3, { TA_NULL, tex_routine });
#ifdef TOPPERS_SYSTIM_LOCAL
	CRE_CYC(CYCHDR3, { TA_NULL, 3, cyclic_handler, CYC_TIME, 0 });
	CRE_ALM(ALMHDR3, { TA_NULL, 3, alarm_handler });
#endif /* TOPPERS_SYSTIM_LOCAL */
#ifdef CPUEXC3
	DEF_EXC(CPUEXC3, { TA_NULL, cpuexc_handler });
#endif /* CPUEXC3 */
	CRE_DTQ(SERVER_DTQ3, { TA_TPRI, NUM_SERVER_DTQ, NULL });
	ATT_INI({ TA_NULL, 3, local_inirtn });
	ATT_TER({ TA_NULL, 3, local_terrtn });
#ifdef TOPPERS_SAFEG_SECURE
	ATT_INI({ TA_NULL, 1, safeg_load_init });
	CRE_TSK(BTASK3, { TA_ACT, 3, btask, 15, STACK_SIZE, NULL });
	CRE_TSK(RTASK3, { TA_NULL, 3, rtask, 14, STACK_SIZE, NULL });
	CRE_CYC(CYCHDR_S3, { TA_NULL, 3, cyclic_handler_s, 1000, 0 });
#endif /* TOPPERS_SAFEG_SECURE */
}

#ifdef TOPPERS_SYSTIM_GLOBAL
CLASS(TCL_SYSTIM_PRC){
	CRE_CYC(CYCHDR3, { TA_NULL, 3, cyclic_handler, CYC_TIME, 0 });
	CRE_ALM(ALMHDR3, { TA_NULL, 3, alarm_handler });
}
#endif /* TOPPERS_SYSTIM_GLOBAL */
#endif /* TNUM_PRCID >= 3 */

#if TNUM_PRCID >= 4
CLASS(TCL_4){
	CRE_TSK(TASK4_1, { TA_NULL, 0x40000|1, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK4_2, { TA_NULL, 0x40000|2, task, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK4_3, { TA_NULL, 0x40000|3, task, MID_PRIORITY, STACK_SIZE, NULL });
#ifndef G_SYSLOG
	CRE_TSK(MAIN_TASK4, { TA_ACT, 4, main_task, MAIN_PRIORITY, STACK_SIZE, NULL });
#endif /* G_SYSLOG */
	CRE_TSK(SERVER_TASK4, { TA_ACT, 4, server_task, SERVER_PRIORITY, STACK_SIZE, NULL });
	DEF_TEX(TASK4_1, { TA_NULL, tex_routine });
	DEF_TEX(TASK4_2, { TA_NULL, tex_routine });
	DEF_TEX(TASK4_3, { TA_NULL, tex_routine });
#ifdef TOPPERS_SYSTIM_LOCAL
	CRE_CYC(CYCHDR4, { TA_NULL, 4, cyclic_handler, CYC_TIME, 0 });
	CRE_ALM(ALMHDR4, { TA_NULL, 4, alarm_handler });
#endif /* TOPPERS_SYSTIM_LOCAL */
#ifdef CPUEXC4
	DEF_EXC(CPUEXC4, { TA_NULL, cpuexc_handler });
#endif /* CPUEXC4 */
	CRE_DTQ(SERVER_DTQ4, { TA_TPRI, NUM_SERVER_DTQ, NULL });
	ATT_INI({ TA_NULL, 4, local_inirtn });
	ATT_TER({ TA_NULL, 4, local_terrtn });
#ifdef TOPPERS_SAFEG_SECURE
	ATT_INI({ TA_NULL, 1, safeg_load_init });
	CRE_TSK(BTASK4, { TA_ACT, 4, btask, 15, STACK_SIZE, NULL });
	CRE_TSK(RTASK4, { TA_NULL, 4, rtask, 14, STACK_SIZE, NULL });
	CRE_CYC(CYCHDR_S4, { TA_NULL, 4, cyclic_handler_s, 1000, 0 });
#endif /* TOPPERS_SAFEG_SECURE */
}

#ifdef TOPPERS_SYSTIM_GLOBAL
CLASS(TCL_SYSTIM_PRC){
	CRE_CYC(CYCHDR4, { TA_NULL, 4, cyclic_handler, CYC_TIME, 0 });
	CRE_ALM(ALMHDR4, { TA_NULL, 4, alarm_handler });
}
#endif /* TOPPERS_SYSTIM_GLOBAL */
#endif /* TNUM_PRCID >= 4 */
