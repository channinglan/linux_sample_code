1. fork/vfork
training/process/fork

2. time 
   \time
thread/thread_life.c   /* if 0 -> if 1 */

3. sudo cyclictest -p 99 -t1 -n

4. run thread/thread_life.c  /* if 0 -> if 1 */
run top;

use chrt and taskset to change scheduler for its threads
use renice to change the nice of normal processes:
renice -n -6 -g pid

how to run chrt, taskset:
~/develop/training/process/tools
sudo taskset -a -p 03 4354
sudo chrt -f -a -p 50 4206

----------------------
5. 
cgroup
create two cpu:xxx cpu:yyy group, 
run two thread/thread_life.c
put name into cpu:xxx cpu:yyy

change cfs quota or shares

check the result

--------------------------
6.
kernel panic:

change ~develop/linux by:
 22 diff --git a/drivers/char/globalfifo/globalfifo.c b/drivers/char/globalfifo/globalfifo.c
 23 index ff3e3bf..64d553b 100644
 24 --- a/drivers/char/globalfifo/globalfifo.c
 25 +++ b/drivers/char/globalfifo/globalfifo.c
 26 @@ -104,6 +104,9 @@ static ssize_t globalfifo_read(struct file *filp, char __user *buf,
 27         mutex_lock(&dev->mutex);
 28         add_wait_queue(&dev->r_wait, &wait);
 29 
 30 +       int *p = NULL;
 31 +       *p = 1;
 32 +
 33         while (dev->current_len == 0) {
 34                 if (filp->f_flags & O_NONBLOCK) {
 35                         ret = -EAGAIN;

use ./module.sh to compile and install the module
boot embedded linux and read /dev/globalfifo
-----------------------------

7.
use qemu-system-arm with "-s -S", and use arm gdb to debug embedded kernel

shell1:
~/develop/linux/extra/ run-nolcd.sh or run-lcd.sh
before running, add -s -S in the script.

shell2:
cd ~/develop/linux
arm-linux-gnueabihf-gdb vmlinux
# target remote :1234

