===GENERAL STRATEGIES FOR DEBUGGING C PROGRAMS===

1) Check all return values. "man functionName" will provide documentation for many functions. To search a man page, press 'Home' or PageUp to make sure you are at the top of the page. Type '/something' to search for something (case sensitive) and then press enter when you are done typing. To search for the same thing as you last search for, press '/' and then 'enter' repeatedly. 'q' will exit the man page.

2) Check the return values of all function calls to ensure that they worked correctly. If the return values indicate an error, display an appropriate error message or attempt to recover from the error. One quick way is to check return values with assert() (see assert.c example). However, it is best to use assertions to check for things that would be a bug in the program and regular error handling (exceptions, if statements, etc) to handle errors that do not correspond with bugs in a program (for example, not having permission to read from a file is an error---not a bug in the program). For a discussion of this, see: http://blog.regehr.org/archives/1091

3) Use "-Wall -Wextra -g -D_FORTIFY_SOURCE=2 -O2" to enable nearly all compiler warnings, include debugging information in the executable you create, and check for some types of buffer overflow problems. Fix compiler warnings whenever possible. Don't ignore them.

4) If your program segfaults, use gdb. See gdb.txt for instructions.

5) If your program is acting strangely (or if it segfaults), use valgrind. See valgrind.txt for instructions.


=== HAVE A WORKING PROGRAM? What other checks can I do before I turn in my programming assignment? ===

1) Think about what tests the grader might use to test your program. What are all of the wrong ways that someone could run your program?

2) Run your code through valgrind and cppcheck one last time. Even though your program is working well, you might be relying on undefined behavior.

3) If you can, try running your program a computer with a different OS (even if they are both Linux machines). If you haven't tested it on the type of machine that the grader will be using (for example, a lab machine), do so.

4) Try compiling your program with a different compiler (if you can). "clang" that works just like "gcc". Just change "gcc" in your makefile to "clang". Sometimes this can identify new problems that you didn't know about before and/or print different warnings. Unless you are told otherwise, you should expect that the grader will be using gcc for y our program.

5) Try compiling and running with "-Wall -Wextra -g -D_FORTIFY_SOURCE=2 -O2". When you turn in your assignment, you may want to revert back to simply "-g", or "-Wall -g" or whatever is required by the instructor. In general, it is a good idea to at least include "-g" in case the grader wants to run your program with GDB or Valgrind.

6) Compiling your code using the "clang" compiler and passing the -fsanitize=??? where ??? is "undefined", "integer" or "address". When you compile your program with these options, the compiler will insert additional checks into your code that may print errors/warnings when you run your program. For more details, see:   http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation

7) Compiling your code using the "clang" compiler and passing the --analyze parameter to enable the Clang Static Analyzer
