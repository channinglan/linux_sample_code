getaddrinfo() takes a hostname, port, and other information and creates a linked list of addrinfo structs:

           struct addrinfo {
               int              ai_flags;
               int              ai_family;
               int              ai_socktype;
               int              ai_protocol;
               socklen_t        ai_addrlen;
               struct sockaddr *ai_addr;
               char            *ai_canonname;
               struct addrinfo *ai_next;
           };

==================================

"struct sockaddr" is a structure that is designed to be large enough that it can contain all other types of sockaddr structs. When you see "struct sockaddr" in documentation, remember that you can cast any of the structs below into a "struct sockaddr". Also, if you know exactly what kind of sockaddr a particular "struct sockaddr" is, you can cast it into that specific kind of struct. The following structs document what different sockaddr structs look like:

// Sockaddr for IPv4
struct sockaddr_in {
    short            sin_family;             // e.g. AF_INET
    unsigned short   sin_port;     // e.g. htons(3490)
    struct in_addr   sin_addr;       // see struct in_addr, below
    char             sin_zero[8];  // zero this if you want to
};

struct in_addr {
    unsigned long s_addr;          // load with inet_pton()
};

// Sockaddr for IPv6
struct sockaddr_in6 {
    u_int16_t       sin6_family;   // address family, AF_INET6
    u_int16_t       sin6_port;     // port number, Network Byte Order
    u_int32_t       sin6_flowinfo; // IPv6 flow information
    struct in6_addr sin6_addr;     // IPv6 address
    u_int32_t       sin6_scope_id; // Scope ID
};

struct in6_addr {
    unsigned char   s6_addr[16];   // load with inet_pton()
};

// Sockaddr for Unix Domain Sockets
struct sockaddr_un {
    unsigned short sun_family;  /* AF_UNIX */
    char sun_path[108];
}


